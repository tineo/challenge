name: Deployment
on:
  push:
    branches:
      - main
jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      # Configura Java con Maven usando Corretto 17, preparando el entorno para construir la aplicación Java
      - name: Set up Maven
        uses: actions/setup-java@v4
        with:
          distribution: corretto
          java-version: 17
      # Genera cache de las dependencias de Maven para acelerar futuras ejecuciones.
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      # Ejecuta Maven para verificar el proyecto y analizarlo con SonarCloud, asegurando la calidad del código.
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn -B verify \
              org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
              -Dsonar.host.url=https://sonarcloud.io \
              -Dsonar.projectKey=tineo_challenge \
              -Dsonar.organization=tineo
      # Compila el proyecto y empaqueta la aplicación en un archivo JAR.
      - name: Build jar and package
        run: mvn clean install
      # Configura las credenciales de AWS para permitir el acceso a los servicios AWS.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      # Inicia sesión en Amazon ECR para poder subir imágenes de Docker.
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      # Construye la imagen Docker de la aplicación, la etiqueta y la sube al repositorio ECR especificado.
      - name: Build image, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_URI }}
          ECR_REPOSITORY: challenge
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  deploy-in-ecs:
    needs: build-and-push-image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      # Descarga la definición de la tarea ECS actual para actualizarla.
      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition mi-aplicacion --query taskDefinition > task-definition.json
      # Actualiza la definición de la tarea con la nueva imagen Docker.
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        env:
          ECR_REGISTRY: ${{ secrets.ECR_URI }}
          ECR_REPOSITORY: challenge
          IMAGE_TAG: latest
        with:
          task-definition: task-definition.json
          container-name: mi-contenedor
          image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
      # Despliega la nueva definición de tarea en el servicio ECS especificado, actualizando la aplicación en el entorno de ECS.
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: mi-servicio-ecs
          cluster: mi-cluster-ecs
          wait-for-service-stability: true

  create-release:
    needs: build-and-push-image
    runs-on: ubuntu-latest
    steps:
      # Prepara el entorno Java y clona el código.
      - uses: actions/checkout@v4
      - name: Set up Maven
        uses: actions/setup-java@v4
        with:
          distribution: corretto
          java-version: 17
      # Publica el paquete Maven al repositorio configurado.
      - name: Publish package
        run: mvn --batch-mode deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      # Extrae la versión y el nombre de la aplicación del archivo pom.xml para usar en la creación del release.
      - name: Extract version and name from pom.xml
        id: extract
        run: |
          version=$(grep -oP '(?<=<version>).*(?=<\/version>)' pom.xml | tail -n 1)
          version_number=${version%-SNAPSHOT}
          name=$(grep -oP '(?<=<name>).*(?=<\/name>)' pom.xml | head -n 1)
          echo "Extracted version: $version"
          echo "Extracted version_number: $version_number"
          echo "Extracted name: $name"
          echo "::set-output name=VERSION::$version"
          echo "::set-output name=VERSION_NUMBER::$version_number"
          echo "::set-output name=NAME::$name"
      # Imprime la información extraída para verificación.
      - name: Print extracted information
        run: |
          echo "Extracted version: ${{ steps.extract.outputs.VERSION }}"
          echo "Extracted version_number: ${{ steps.extract.outputs.VERSION_NUMBER }}"
          echo "Extracted name: ${{ steps.extract.outputs.NAME }}"
      # Crea un release en GitHub usando la versión y el nombre extraídos, adjunta el archivo JAR generado a este release.
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GH_TOKEN }}
          tag_name: ${{ steps.extract.outputs.VERSION_NUMBER }}
          name: ${{ steps.extract.outputs.VERSION_NUMBER }}
          body: deployed ${{ steps.extract.outputs.NAME }}-${{ steps.extract.outputs.VERSION_NUMBER }}
          draft: false
          prerelease: false
          files: target/${{ steps.extract.outputs.NAME }}-${{ steps.extract.outputs.VERSION }}.jar

